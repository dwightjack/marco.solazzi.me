---
import routes from '../shared/routes';
import Stack from './Stack.astro';
---

<nav class="c-nav" aria-label="Sections Navigation">
  <Stack as="ul" space={3} class="c-nav__menu">
    {
      routes.map(({ path, label }) => (
        <li class="c-nav__item">
          <a href={`#${path}`} class="c-nav__route">
            {label}
          </a>
        </li>
      ))
    }
  </Stack>
</nav>
<style>
  .c-nav {
    display: flex;
    position: absolute;
    align-items: center;
    block-size: 100vh;
    padding: 2rem;
    transform: translateX(0);
    transition: transform 700ms cubic-bezier(0.85, 0.07, 0.04, 0.99);
    background-color: var(--color-link);
    inset-block-start: 0;
    inset-inline-start: 100%;
    will-change: transform;
  }

  .c-nav.is-expanded {
    transform: translateX(-100%);
  }

  .c-nav__item {
    margin-inline-start: 0;
  }

  .c-nav__route {
    display: block;
    padding: 0.5rem 1.75rem;
    transition: opacity 150ms linear;
    opacity: 0.8;
    color: var(--color-light);
    font-family: var(--font-family-h);
    font-size: 18px;
    letter-spacing: 0.05em;
    text-align: end;
    text-decoration: none;
    white-space: nowrap;
  }

  .c-nav__route::before {
    content: '.';
    display: inline-block;
    transform: translateX(-0.4em);
    transition: all 250ms ease-out;
    opacity: 0;
  }

  .c-nav__route:is(.is-current, :hover) {
    opacity: 1;
  }

  .c-nav__route:is(.is-current, :hover)::before {
    transform: translateX(-0.1em);
    opacity: 1;
  }
</style>
<script>
  import { menuExpanded, currentRoute } from '../shared/store';

  const navList = document.querySelectorAll('.c-nav');

  menuExpanded.subscribe((expanded) => {
    for (const nav of navList) {
      nav.classList.toggle('is-expanded', expanded);
      nav.setAttribute('aria-hidden', `${!expanded}`);
      const routes = nav.querySelectorAll('.c-nav__route');
      for (const route of routes) {
        route.setAttribute('tabindex', expanded ? '0' : '-1');
      }
    }
  });

  for (const nav of navList) {
    const routes = nav.querySelectorAll('.c-nav__route');
    currentRoute.subscribe((currentRoute) => {
      if (!currentRoute) {
        return;
      }
      for (const route of routes) {
        const isCurrent = route.getAttribute('href') === `#${currentRoute}`;
        if (isCurrent) {
          route.setAttribute('aria-current', 'true');
        } else {
          route.removeAttribute('aria-current');
        }
        route.classList.toggle('is-current', isCurrent);
      }
    });
  }
</script>
