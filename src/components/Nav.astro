---
import routes from '../shared/routes';
import Box from './Box.astro';

export interface Props {
  layout?: 'offscreen' | 'inline';
}

const { layout = 'offscreen' } = Astro.props;
const isOffscreen = layout === 'offscreen';
---

<Box
  as="nav"
  class:list={['c-nav', 'c-nav--' + layout]}
  indent={isOffscreen ? 4 : 0}
  {...isOffscreen && { swatch: 'brand' }}
  aria-label="Sections"
>
  <ul
    class:list={[
      {
        'p-stack': isOffscreen,
        'p-cluster': !isOffscreen,
      },
    ]}
    style={{ '--s': 2 }}
  >
    {
      routes.map(({ path, label }) => (
        <li class="c-nav__item">
          {/* prettier-ignore */}
          <a href={path} class="c-nav__route">{label}</a>
        </li>
      ))
    }
  </ul>
</Box>
<style>
  @layer components {
    .c-nav {
      display: flex;
      align-items: center;
      font-family: var(--text-heading-font-family);
      font-weight: 400;
    }

    .c-nav__item {
      margin-inline-start: 0;
    }

    .c-nav__route {
      letter-spacing: 0.05em;
      text-align: end;
      text-decoration: none;
      white-space: nowrap;
    }

    .c-nav__route::before {
      content: '';
      display: inline-block;
      inline-size: 0.18em;
      margin-inline-end: 0;
      transform: translateX(-0.2em);
      transition: all 250ms ease-out;
      border-radius: 1em;
      opacity: 0;
      background-color: currentcolor;
      aspect-ratio: 1;

      @media (prefers-reduced-motion: no-preference) {
        transform: translateX(-0.6em);
      }
    }

    .c-nav__route:hover::before {
      @media (--pointer-mouse) {
        transform: translateX(-0.2em);
        opacity: 1;
      }
    }

    .c-nav__route.is-current::before {
      transform: translateX(-0.2em);
      transition-delay: 200ms;
      opacity: 1;
    }

    .c-nav--offscreen {
      position: absolute;
      block-size: 100dvh;
      transform: translateX(0);
      inset-block-start: 0;
      inset-inline-start: 100%;
      will-change: transform;

      @media (prefers-reduced-motion: no-preference) {
        transition: transform 700ms var(--easing-in-out);
      }

      &.is-expanded {
        transform: translateX(-100%);
      }

      .c-nav__route {
        display: block;
        padding-block: var(--space-1);
        padding-inline: calc(var(--space-2) * 1.75);
        transition: opacity 150ms linear;
        opacity: 0.8;
        color: inherit;
        font-size: var(--text-body-font-size-x3);
      }

      .c-nav__route.is-current {
        opacity: 1;
      }

      .c-nav__route:hover {
        @media (--pointer-mouse) {
          opacity: 1;
        }
      }
    }

    .c-nav--inline {
      margin-inline-end: var(--space-1);
      letter-spacing: 0.05em;
      text-align: end;

      /* stylelint-disable-next-line no-descending-specificity */
      .c-nav__route {
        display: block;
        color: var(--navigation-color-foreground-secondary);
        font-size: var(--text-body-font-size);
      }
    }
  }
</style>
<script>
  import { menuExpanded, currentRoute } from '../shared/store';

  const navList = document.querySelectorAll<HTMLElement>('.c-nav');

  menuExpanded.subscribe((expanded) => {
    for (const nav of navList) {
      if (nav.classList.contains('c-nav--offscreen')) {
        nav.classList.toggle('is-expanded', expanded);
        nav.inert = !expanded;
      }
    }
  });

  for (const nav of navList) {
    const routes = nav.querySelectorAll('.c-nav__route');
    currentRoute.subscribe((currentRoute) => {
      if (!currentRoute) {
        return;
      }
      for (const route of routes) {
        const isCurrent = route.getAttribute('href') === currentRoute;
        if (isCurrent) {
          route.setAttribute('aria-current', 'true');
        } else {
          route.removeAttribute('aria-current');
        }
        route.classList.toggle('is-current', isCurrent);
      }
    });
  }
</script>
