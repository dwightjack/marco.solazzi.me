---
import Cluster from './Cluster.astro';
import DateTime from './DateTime.astro';
import ExternalAnchor from './ExternalAnchor.astro';
export interface Props {
  id: string;
  titleLabel?: string;
  title?: string;
  href?: string;
  data: Record<string, unknown>;
  meta?: Record<string, string>[];
}

const { id, titleLabel, href, title = '', data = {}, meta = [] } = Astro.props;

function isDate(heading: string) {
  return heading === 'to' || heading === 'from' || heading === 'date';
}

function metaTitle(meta: Record<string, string>) {
  switch (meta.type) {
    case 'video':
      return `Watch video for: ${title}`;

    case 'slides':
      return `Slides for: ${title}`;

    case 'award':
      return `${meta.label || 'Award'} details for ${title}`;

    default:
      return '';
  }
}
---

<article class="c-card">
  {
    titleLabel && (
      <h3 class="c-card__title" id={`table-${id}`}>
        .{titleLabel}:
        {typeof href === 'string' ? (
          <a href={href} target="_blank" rel="external noopener noreferrer">
            {title}
          </a>
        ) : (
          <span>{title}</span>
        )}
      </h3>
    )
  }

  <dl class="c-card__data" aria-labelledby={`table-${id}`}>
    {
      Object.entries(data).map(([heading, value]) => (
        <div data-row={heading}>
          <dt>.{heading}:</dt>
          <dd>
            {isDate(heading) && typeof value === 'string' ? (
              <DateTime datetime={value} />
            ) : (
              <Fragment set:html={value} />
            )}
          </dd>
        </div>
      ))
    }
  </dl>
  {
    meta.length > 0 && (
      <Cluster as="footer" space={1}>
        {meta.map((meta) => (
          <ExternalAnchor
            variant="cursor"
            href={meta.link}
            icon={meta.icon || meta.type}
            title={title && metaTitle(meta)}
          >
            {meta.label || meta.type}
            {meta.type === 'video' && meta.lang && ` (${meta.lang})`}
          </ExternalAnchor>
        ))}
      </Cluster>
    )
  }
</article>
<style>
  .c-card {
    --gradient: linear-gradient(
      var(--box-color-border),
      var(--box-color-border)
    );

    inline-size: 100%;
    padding-block: calc(var(--space-unit) * 1.25) var(--space-2);
    padding-inline-start: calc(var(--space-unit) * 3.75);
    background-image: var(--gradient), var(--gradient), var(--gradient);
    background-repeat: no-repeat;
    background-position: 0 0, 0 8px, 0 bottom;
    background-size: 16px 8px, 8px calc(100% - 16px), 16px 8px;

    @media (--pointer-mouse) and (prefers-reduced-motion: no-preference) {
      transition: all 250ms ease-in-out;
      transition-property: background-position, background-size;

      &:hover {
        background-position: 8px 0, 8px 0, 8px bottom;
        background-size: 8px 0, 8px 100%, 8px 0;
      }
    }
  }

  .c-card__title {
    font-size: var(--text-heading-font-size);
    line-height: 1.5;

    @media (--viewport-tablet-landscape) {
      font-size: var(--text-heading-font-size-mq);
    }
  }

  .c-card__data {
    margin-block: var(--space-2);

    @media (--viewport-tablet-landscape) {
      font-size: var(--text-body-font-size-x2);
    }
  }

  .c-card__data > * {
    max-inline-size: 60ch;
    margin-inline-start: 0.3em;
  }

  .c-card__data :is(dt, dd) {
    display: inline;
    margin-inline-start: 0;
    line-height: 1.5;
  }

  .c-card__data dt {
    margin-inline-start: -0.3em;
    font-weight: 700;
  }

  .c-card__data [data-row='title'] {
    margin-block-start: 0.5em;
  }
</style>
