---
import Cluster from './Cluster.astro';
import DateTime from './DateTime.astro';
import ExternalAnchor from './ExternalAnchor.astro';
type Variant = 'brackets';
export interface Props {
  variants?: Variant | Variant[];
  id: string;
  titleLabel?: string;
  title?: string;
  href?: string;
  data: Record<string, unknown>;
  meta?: Record<string, string>[];
}

const { id, titleLabel, href, title = '', data = {}, meta = [] } = Astro.props;

const variants = ([] as Variant[])
  .concat(Astro.props.variants ?? 'brackets')
  .filter(Boolean);
const variantsClasses = variants.map((v) => `c-card--${v}`);

function isDate(heading: string) {
  return heading === 'to' || heading === 'from' || heading === 'date';
}

function metaTitle(type: string) {
  switch (type) {
    case 'video':
      return `Watch video for: ${title}`;

    case 'slides':
      return `Slides for: ${title}`;

    default:
      return '';
  }
}
---

<article class:list={['c-card', ...variantsClasses]}>
  {
    titleLabel && (
      <h3 class="c-card__caption" id={`table-${id}`}>
        .{titleLabel}:
        {typeof href === 'string' ? (
          <a href={href} target="_blank" rel="external noopener noreferrer">
            {title}
          </a>
        ) : (
          <span>{title}</span>
        )}
      </h3>
    )
  }

  <dl class="c-card__data" aria-labelledby={`table-${id}`}>
    {
      Object.entries(data).map(([heading, value]) => (
        <div data-row={heading}>
          <dt>.{heading}:</dt>
          <dd>
            {isDate(heading) && typeof value === 'string' ? (
              <DateTime datetime={value} />
            ) : (
              <Fragment set:html={value} />
            )}
          </dd>
        </div>
      ))
    }
  </dl>
  {
    meta.length > 0 && (
      <Cluster as="footer" space={1}>
        {meta.map((meta) => (
          <ExternalAnchor
            variant="cursor"
            href={meta.link}
            icon={meta.icon || meta.type}
            title={title && metaTitle(meta.type)}
          >
            {meta.label || meta.type}
          </ExternalAnchor>
        ))}
      </Cluster>
    )
  }
</article>
<style>
  .c-card {
    position: relative;
    width: 100%;
    padding-top: 10px;
    padding-bottom: 16px;
    padding-left: 30px;
    background-clip: padding-box;
  }

  @media print {
    .c-card {
      position: relative;
      top: -2px;
      width: 50%;
      border-left: 30px solid transparent;
      page-break-inside: avoid;
    }
  }

  .c-card__caption {
    margin-bottom: 0.7em;
    font-family: var(--font-family-sans);
    font-size: 1.25rem;
    font-weight: 700;
    page-break-inside: avoid;
  }
  @media (--viewport-tablet-landscape) {
    .c-card__caption {
      font-size: 1.375rem;
    }
  }

  .c-card__data {
    font-size: var(--font-size-m);
  }

  @media (--viewport-tablet-landscape) {
    .c-card__data {
      font-size: 1.125rem;
    }
  }

  .c-card__data > * {
    margin-bottom: 0.2em;
    margin-left: 0.3em;
    max-width: 60ch;
  }

  .c-card__data :is(dt, dd) {
    display: inline;
    margin-left: 0;
    line-height: 1.5em;
  }

  .c-card__data dt {
    font-weight: 700;
    margin-left: -0.3em;
  }

  .c-card__data [data-row='title'] {
    margin-top: 0.5em;
  }

  .c-card--brackets {
    --gradient: linear-gradient(
      var(--color-red-400-a50),
      var(--color-red-400-a50)
    );

    background-image: var(--gradient), var(--gradient), var(--gradient);
    background-position: 8px 0, 0 0, 8px bottom;
    background-repeat: no-repeat;
    background-size: 8px 8px, 8px 100%, 8px 8px;
  }

  @media (--viewport-tablet-landscape) {
    .c-card--brackets {
      border-left: 20px solid transparent;
      margin-left: -20px;
    }
  }
</style>
